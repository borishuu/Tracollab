datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String        @unique
  name           String        @unique
  password       String
  profilePicture String
  joinDate       DateTime
  posts          Post[]        @relation("UserPosts")
  likes          UserLikes[]
  reports        UserReports[]
}

model Sound {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  audioPath     String
  picture       String
  genreId       String         @db.ObjectId
  genre         Genre          @relation(fields: [genreId], references: [id])
  isFinished    Boolean        @default(false)
  posts         Post[]
  instrumentals Instrumental[] @relation("SoundInstrumentals")
  voices        Voice[]        @relation("SoundVoices")
}

model Instrumental {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  soundId String @db.ObjectId
  sound   Sound  @relation("SoundInstrumentals", fields: [soundId], references: [id])
}

model Voice {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  soundId String @db.ObjectId
  sound   Sound  @relation("SoundVoices", fields: [soundId], references: [id])
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  description String
  date        DateTime
  userId      String        @db.ObjectId
  user        User          @relation("UserPosts", fields: [userId], references: [id])
  soundId     String        @db.ObjectId
  sound       Sound         @relation(fields: [soundId], references: [id])
  comments    Comment[]
  likes       UserLikes[]
  reports     UserReports[]
}

model UserLikes {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model UserReports {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model Comment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  publish Boolean
  postId  String  @db.ObjectId
  post    Post    @relation(fields: [postId], references: [id])
}

model Genre {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  sounds Sound[]
}
