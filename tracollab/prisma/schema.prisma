datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  email          String       @unique
  name           String       @unique
  password       String
  profilePicture String
  joinDate       DateTime     @default(now())
  comments       Comment[]    @relation("UserComments")
  posts          Post[]       @relation("UserPosts")
  likes          UserLike[]   @relation("UserLikes")
  reports        UserReport[] @relation("UserReports")
}

model Sound {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  audioPath     String
  picture       String
  genreId       String         @db.ObjectId
  genre         Genre          @relation("SoundGenre", fields: [genreId], references: [id])
  isFinished    Boolean        @default(false)
  posts         Post[]         @relation("SoundPosts")
  instrumentals Instrumental[] @relation("SoundInstrumentals")
  voices        Voice[]        @relation("SoundVoices")
  comments      Comment[]      @relation("SoundComments")
}

model Instrumental {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  soundId String @db.ObjectId
  sound   Sound  @relation("SoundInstrumentals", fields: [soundId], references: [id], onDelete: Cascade)
}

model Voice {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  soundId String @db.ObjectId
  sound   Sound  @relation("SoundVoices", fields: [soundId], references: [id], onDelete: Cascade)
}

model Post {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  description String
  date        DateTime     @default(now())
  userId      String       @db.ObjectId
  user        User         @relation("UserPosts", fields: [userId], references: [id])
  soundId     String       @db.ObjectId
  sound       Sound        @relation("SoundPosts", fields: [soundId], references: [id])
  comments    Comment[]    @relation("PostComments")
  likes       UserLike[]   @relation("PostLikes")
  reports     UserReport[] @relation("PostReports")
}

model UserLike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  user   User   @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
}

model UserReport {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  user   User   @relation("UserReports", fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation("PostReports", fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  publish Boolean @default(false)
  soundId String? @db.ObjectId // Optional field
  sound   Sound?  @relation("SoundComments", fields: [soundId], references: [id]) // Optional field
  postId  String  @db.ObjectId
  post    Post    @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  userId  String  @db.ObjectId
  user    User    @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
}

model Genre {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  sounds Sound[] @relation("SoundGenre")
}
